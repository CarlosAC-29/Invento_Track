'use client'
import React, { useEffect, useState } from 'react'
import './styles.css'
import Box from '@mui/material/Box';
import ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';
import { Button, TextField, Typography } from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import BorderColorOutlinedIcon from '@mui/icons-material/BorderColorOutlined';
import DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';
import AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';
import InventoryIcon from '@mui/icons-material/Inventory';
import { useForm } from 'react-hook-form';
import { listarClientes } from '@/app/api/api.routes';
import { eliminarCliente } from '@/app/api/api.routes';
import { useRouter } from 'next/navigation';
import Navbar from '@/app/components/navbar';
import Link from 'next/link';
import Swal from 'sweetalert2';

function ListaClientes() {

  const [clientes, setClientes] = useState([]);
  const router = useRouter();

  useEffect(() => {
    fetch('http://localhost:5000/clientes')
      .then(response => response.json())
      .then(data => setClientes(data))
      .catch(error => console.error('Error:', error));
  }, []);

  const handleClick = () => {
    router.push('../usuarios/registro-clientes');
  };

  const handleEdit = () => {
    router.push({
      pathname: '../usuarios/editar-clientes',
      query: { id: 1 }
    });
  };

  const handleDelete = async (id) => {
    const response = await eliminarCliente(id);
    if (response) {
      const newVendedores = clientes.filter(cliente => cliente.id !== id);
      setClientes(newVendedores);
      console.log('Cliente eliminado');
    } else {
      console.log('Error al eliminar cliente');
    }
  }


  return (
    <>
      <head>
        <title>Lista de Clientes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.ico" />
      </head>
      <body>
      <Navbar />
        <div style={{ display: 'flex', alignItems: 'center', marginLeft: '5%', marginTop: '2%', color: '#090069' }}>
          <h1>Lista de clientes</h1>
        </div>

        <div id='operaciones'>

          <div style={{ display: 'flex', alignItems: 'center' }}>
            <Button onClick={handleClick} id="botonAgregarCliente" className="botones" variant="outlined">Agregar cliente</Button>
            <Box className="tarjetas" id='buscarCliente'>
              <p>Buscar cliente</p>
              <TextField className='input' id="inputBuscarCliente" label="Buscar" variant="outlined" />
              <SearchIcon id='iconoBuscar' />
            </Box>
          </div>

          <div id="listaClientes">
            {clientes.map((cliente, index) => (
              <Box key={index} className="tarjetas" id='clientes'>
                <div id='nombreCliente'>
                  <p>Nombre: {cliente.nombre}</p>
                  <p>Apellido: {cliente.apellido}</p>
                </div>
                <div id='correoEstadoCliente'>
                  <p>email: {cliente.email}</p>
                  <p>direccion: {cliente.direccion}</p>
                  <p>telefono: {cliente.telefono}</p>
                </div>
                <div id='accionesCliente' style={{ display: 'flex', alignItems: 'center' }}>
                  <Link
                    href={{
                      pathname: '../usuarios/editar-clientes',
                      query: {
                        id: cliente.id,
                        nombre: cliente.nombre,
                        apellido: cliente.apellido,
                        email: cliente.email,
                        direccion: cliente.direccion,
                        telefono: cliente.telefono
                      }
                    }}
                  >
                    <BorderColorOutlinedIcon id='iconoEditar' />
                  </Link>
                  <DeleteOutlinedIcon id='iconoEliminar' onClick={() => {
                    Swal.fire({
                      title: "¿Estás seguro que deseas eliminar el cliente?",
                      text: "Esta acción es irreversible.",
                      icon: "warning",
                      showCancelButton: true,
                      confirmButtonColor: "#3085d6",
                      cancelButtonColor: "#d33",
                      confirmButtonText: "Sí, deseo borrarlo."
                    }).then((result) => {
                      if (result.isConfirmed) {
                        handleDelete(cliente.id)
                        Swal.fire({
                          title: "¡Cliente eliminado!",
                          text: "El cliente ha sido eliminado exitosamente.",
                          icon: "success"
                        });
                      }
                    })
                  }} />
                </div>
              </Box>
            ))}
          </div>

        </div>
      </body>
    </>
  )
}

export default ListaClientes